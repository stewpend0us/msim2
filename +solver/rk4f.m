function [output, state, dstate, input] = rk4f(...
    block,...
    dt,...
    time,...
    Xi,...
    inputf,...
    finput...
    )
numSteps = numel(time);

output = zeros(numSteps,block.numOutputs);
state = zeros(numSteps,block.numStates);
dstate = zeros(numSteps,block.numStates);
input = zeros(numSteps,block.numInputs);

state(1,:) = Xi;
for i = 1:(numSteps-1)
    [output(i,:), block.storage] = block.h(block.numStates, block.numOutputs, time(i), state(i,:), block.storage);
    input(i,:) = inputf(time(i), output(i,:), finput(i,:));
    [state(i+1,:), dstate(i,:), block.storage] = rk4_f_step(block.numStates, block.numInputs, dt, time(i), state(i,:), input(i,:), input(i,:), input(i,:), block.f, block.storage);
end
i = numSteps;
[output(i,:), block.storage] = block.h(block.numStates, block.numOutputs, time(i), state(i,:), block.storage);
[dstate(i,:), block.storage] = block.f(block.numStates, block.numInputs, time(i), state(i,:), input(i,:), block.storage);
input(i,:) = inputf(time(i), output(i,:), finput(i,:));
end

function [nextState, A, storage] = rk4_f_step(...
    numStates,...
    numInputs,...
    dt,...
    currentTime,...
    currentState,...
    currentInput,...
    currentInput2,...
    nextInput,...
    f,...
    storage...
    )
dt2 = dt / 2;
currentTime2 = currentTime + dt2;
nextTime = currentTime + dt;
[A, storage] = f(numStates, numInputs, currentTime, currentState, currentInput, storage);
nextState = currentState + A * dt2;

[B, storage] = f(numStates, numInputs, currentTime2, nextState, currentInput2, storage);
nextState = currentState + B * dt2;

[C, storage] = f(numStates, numInputs, currentTime2, nextState, currentInput2, storage);
nextState = currentState + C * dt;

[D, storage] = f(numStates, numInputs, nextTime, nextState, nextInput, storage);
nextState = currentState + dt .* (A + 2 * B + 2 * C + D) / 6;
end